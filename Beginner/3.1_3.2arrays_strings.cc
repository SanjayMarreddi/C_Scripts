// Arrays are used for storing info of same type

#include <stdio.h>


// Passing an array to a Function.

void printarrayelement(int array[]){

    printf("\n Inside prinarrayelement function.");
    printf("\narray[0]=%d",array[0]);

    // Even Inside function we can try to access the elements outside the range like //Though ar has only 5 elements (till ar[4]), ar[5] or ar[6],.... are also accessible and they possess a random value that is generated by C compiler

    // We may also pass the size of the array as a parameter if required. 

    // Note that We cant return an Array from a function by specifying like:- " int [] printarrayelement(int array[]){ return array[]} "

}



int main(){

    // Different ways of creating Arrays.

    int ar1[5]= {1,2,3,4,5} ;
    //Though ar has only 5 elements (till ar[4]), ar[5] or ar[6],.... are also accessible and they possess a random value that is generated by C compiler

    int ar2[] ={9,8,7,6,5};
    
    char str[]= "Hello World!";     
    //Strings are Char Arrays. When we define these type of objects, Compiler adds an extra letter at the end, which says END OF STRING
    // int i =12;
    // int num = str[i];
    // printf("%d \n",num);  --> Yields "0" to say the end of string


    char chr[]={'a','b','c','d','e'};


    int i =0;

    printf("ar1[%d]=%d \n",i,ar1[i]);
    
    printf("chr[%d]=%c \n",i,chr[i]);

    printf("str[%d]=%c \n",i,str[i]);

    //printing entire string
    // printf("%s",str);


    // strings(Ex:- str) defined will have an end.
    // But array of single characters (Ex:- chr) will not have end i.e End of String chr is not added. So, It keeps on printing all characters from its memory. 

    printf("%s",chr); // results in "abcdeHelloWorld!"" as there is no end character in array named "chr"


    // If we add 0 at the end of "chr" array, Then It stops after printing abcde. 
    // char chr ={'a','b','c','d','e',0}


    // Two Dimensional Arrays :-

    // 2 rows , 5 columns
    int ar2d[2][5]={
        {1,2,3,4,5},
        {9,8,7,6,5}
    };

    /*

    int ar2d[][5] // Works
    int ar2d[][]  // Not works... Second Dimension need to be mentioned

    */


    printf("\nar2d[%d][%d] = %d",1,i,ar2d[1][i]) ;



    // Dimension can be big, but we can specify less number of elements
    
    char strarray[][20] ={

        "Hello World!",
        "Welcome to CS220"
    };

    printf("\nstrarray[1]=%s",strarray[1]) ;

    printf("\nstrarray[%d][%d] = %c",1,i,strarray[1][i]) ;


    // Calling the function with array
    printarrayelement(ar2);

}


// %s -->String


